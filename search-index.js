var N = null;var searchIndex = {};
searchIndex["rendy"]={"doc":"Rendy's top level crate. Reexports all others.","items":[[3,"RenderPassSecondaryEncoder","rendy::command","Special encoder to execute secondary buffers inside render pass.",N,N],[8,"Level","","Type-level buffer level flag. It defines whether buffer can be submitted to the command queues or executed as part of the primary buffers.",N,N],[10,"raw_level","","Get raw level value for command buffer allocation.",0,[[["self"]],["level"]]],[3,"Execute","","Capable of either compute or graphics commands execution.",N,N],[3,"OneShot","","Command buffer with this usage flag will move to invalid state after execution. Resubmitting will require reset and rerecording commands.",N,N],[3,"Transfer","","Capable of transfer only.",N,N],[3,"General","","Capable of any commands execution.",N,N],[3,"InvalidState","","One-shot buffers move to invalid state after execution. Invalidating any resource referenced in any command recorded to the buffer implicitly move it to the invalid state.",N,N],[3,"PendingState","","Command buffer in pending state are submitted to the device. Command buffer in pending state must never be invalidated or reset because device may read it at the moment. Proving device is done with buffer requires nontrivial strategies. Therefore moving buffer from pending state requires `unsafe` method.",N,N],[12,"0","","",1,N],[8,"Submittable","","Submittable object. Values that implement this trait can be submitted to the queues or executed as part of primary buffers (in case of `Submittable<B, SecondaryLevel>`).",N,N],[10,"family","","Get family that this submittable is belong to.",2,[[["self"]],["queuefamilyid"]]],[10,"raw","","Get raw command buffer. The command buffer is returned as raw pointer because its lifetime is not tied to `Submittable` instance lifetime but rather to original `CommandBuffer`. The command buffer cannot be freed before commands are complete which cannot be done before they are submitted. Dereferencing this pointer to perform submission is totally safe. On the other hand calling `CommandBuffer::mark_complete` (which must be done so buffer may be freed) before this pointer used for submission is considered an error.",2,N],[3,"RecordingState","","Command buffer in recording state could be populated with commands.",N,N],[12,"0","","",3,N],[12,"1","","",3,N],[3,"RenderPassEncoder","","Special encoder to record render-pass commands.",N,N],[3,"NoIndividualReset","","This flag specify that buffer cannot be reset individually.",N,N],[3,"Family","","Family of the command queues. Queues from one family can share resources and execute command buffers associated with the family. All queues of the family have same capabilities.",N,N],[3,"Graphics","","Capable of graphics command execution.",N,N],[3,"CommandPool","","Simple pool wrapper. Doesn't provide any guarantees. Wraps raw buffers into `CommandCommand buffer`.",N,N],[3,"DrawCommand","","Draw command for indirect draw.",N,N],[12,"vertex_count","","Number of vertices to draw.",4,N],[12,"instance_count","","Number of instanced to draw.",4,N],[12,"first_vertex","","First vertex index.",4,N],[12,"first_instance","","First instance index.",4,N],[3,"NoSimultaneousUse","","Additional flag that disallows resubmission of a command buffer while it is still in a pending state It must be completed, i.e. a fence must submitted with this buffer or later into the same queue and be waited on before buffer resubmission. `Submit<B, NoSimultaneousUse>` cannot be submitted more than once.",N,N],[3,"IndividualReset","","This flag specify that buffer can be reset individually.",N,N],[3,"RenderPassContinue","","Buffers with this usage flag must be secondary buffers executed entirely in render-pass.",N,N],[3,"Encoder","","Trait to encode commands outside render pass.",N,N],[3,"SimultaneousUse","","Additional flag that allows resubmission of a command buffer while it is still in a pending state. `Submit<B, SimultaneousUse>` can be submitted more than once.",N,N],[8,"Reset","","Specify flags required for command pool creation to allow individual buffer reset.",N,N],[10,"flags","","Get flags for reset parameter.",5,[[["self"]],["commandpoolcreateflags"]]],[3,"CommandBuffer","","Command buffer wrapper. This wrapper defines state with usage, level and ability to be individually reset at type level. This way many methods become safe.",N,N],[8,"RenderPassRelation","","Trait implemented for type-level render pass relation flags. `RenderPassContinue` and `OutsideRenderPass`.",N,N],[10,"flags","","Flags required to begin command buffer.",6,[[["self"]],["commandbufferflags"]]],[3,"OutsideRenderPass","","Primary buffers must has this flag as they cannot has `RenderPassContinue` flag. Secondary buffers with this usage flag cannot be executed as part of render-pass.",N,N],[8,"Supports","","Check if capability supported.",N,N],[10,"supports","","Check runtime capability.",7,[[["self"]],["option"]]],[11,"assert","","Assert capability.",7,N],[3,"InitialState","","Command buffer state in which all buffers start. Resetting also moves buffer to this state.",N,N],[3,"ExecutableState","","Command buffer in executable state can be submitted.",N,N],[12,"0","","",8,N],[12,"1","","",8,N],[3,"PrimaryLevel","","Command buffers of this level can be submitted to the command queues.",N,N],[8,"Resettable","","States in which command buffer can de reset.",N,N],[8,"Capability","","Abstract capability specifier.",N,N],[10,"from_queue_type","","Try to create capability instance from queue_type. Instance will be created if all required queue_type set.",9,[[["queuetype"]],["option"]]],[10,"into_queue_type","","Convert into `gfx_hal::QueueType`",9,[[["self"]],["queuetype"]]],[5,"families_from_device","","Query queue families from device.",N,N],[3,"DispatchCommand","","Draw command for dispatch.",N,N],[12,"x","","Number of local workgroups to dispatch in the X dimension.",10,N],[12,"y","","Number of local workgroups to dispatch in the Y dimension.",10,N],[12,"z","","Number of local workgroups to dispatch in the Z dimension.",10,N],[3,"SecondaryLevel","","Command buffers of this level can be executed as part of the primary buffers.",N,N],[3,"Submission","","Command queue submission.",N,N],[12,"waits","","Iterator over semaphores with stage flag to wait on.",11,N],[12,"signals","","Iterator over semaphores to signal.",11,N],[12,"submits","","Iterator over submittables.",11,N],[8,"Usage","","Type-level usage flags. It defines if buffer can be resubmitted without reset. Or even resubmitted while being executed.",N,N],[10,"flags","","Flags required to begin command buffer.",12,[[["self"]],["commandbufferflags"]]],[3,"Submit","","Structure contains command buffer ready for submission.",N,N],[3,"EncoderCommon","","Encoder for recording commands inside or outside renderpass.",N,N],[3,"RenderPassInlineEncoder","","Special encoder to record commands inside render pass.",N,N],[3,"Compute","","Capable of compute commands execution.",N,N],[3,"MultiShot","","Command buffer with this usage flag will move back to executable state after execution.",N,N],[12,"0","","",13,N],[3,"SavedHeapsConfig","rendy::factory","Saved config for heaps.",N,N],[3,"Factory","","Higher level device interface. Manges memory, resources and queue families.",N,N],[3,"OneGraphicsQueue","","QueuePicker that picks first graphics queue family. If possible it checks that queues of the family are capabile of presenting.",N,N],[8,"QueuesConfigure","","Queues configuration.",N,N],[16,"Priorities","","Slice of priorities.",14,N],[16,"Families","","Iterator over families to create.",14,N],[10,"configure","","Configure.",14,N],[8,"HeapsConfigure","","Heaps configuration.",N,N],[16,"Types","","Iterator over memory types.",15,N],[16,"Heaps","","Iterator over heaps.",15,N],[10,"configure","","Configure.",15,N],[3,"BasicHeapsConfigure","","Basic heaps config.",N,N],[3,"SavedQueueConfig","","Saved config for queues.",N,N],[3,"Config","","Factory initialization config.",N,N],[12,"heaps","","Config for memory::Heaps.",16,N],[12,"queues","","Config for queue families.",16,N],[0,"cirque","rendy::frame","Ring buffers for using with frames.",N,N],[4,"CirqueRef","rendy::frame::cirque","Reference to one of the values in the `Cirque`. It can be in either initial or ready state.",N,N],[13,"Initial","","Reference to value in initial state.",17,N],[13,"Ready","","Reference to value in ready state.",17,N],[3,"InitialRef","","Reference to new value in the `Cirque`. It is in initial state.",N,N],[3,"ReadyRef","","Reference to value in the `Cirque`. It is in ready state.",N,N],[3,"Cirque","","Resource cirque. It simplifies using multiple resources when same resource cannot be used simulteneously.",N,N],[6,"CommandCirque","","",N,N],[3,"Frames","rendy::frame","Timeline of frames, complete, pending and next.",N,N],[6,"Fences","","Fences collection.",N,N],[3,"CompleteFrame","","Proof that frame is complete.",N,N],[3,"Frame","","Single frame rendering task. Command buffers can be submitted as part of the `Frame`.",N,N],[3,"BufferId","rendy::graph","Id of the buffer in graph.",N,N],[3,"ImageId","","Id of the image (or target) in graph.",N,N],[3,"NodeId","","Id of the node in graph.",N,N],[3,"ImageAccess","","Image access node wants to perform.",N,N],[12,"access","","Access flags.",18,N],[12,"usage","","Intended usage flags for image. TODO: Could derive from access?",18,N],[12,"layout","","Preferred layout for access. Actual layout will be reported int `NodeImage`. Actual layout is guaranteed to support same operations. TODO: Could derive from access?",18,N],[12,"stages","","Pipeline stages at which image is accessd.",18,N],[3,"BufferBarrier","","Buffer pipeline barrier.",N,N],[12,"states","","State transition for the buffer.",19,N],[12,"stages","","Stages at which buffer is accessd.",19,N],[12,"families","","Transfer between families.",19,N],[0,"present","","Defines present node.",N,N],[3,"PresentNode","rendy::graph::present","Node that presents images to the surface.",N,N],[3,"PresentDesc","","Presentation node description.",N,N],[3,"Graph","rendy::graph","Graph that renders whole frame.",N,N],[0,"render","","Defines render pass node.",N,N],[3,"SetLayout","rendy::graph::render","Set layout",N,N],[12,"bindings","","Set layout bindings.",20,N],[3,"Layout","","Pipeline layout",N,N],[12,"sets","","Sets in pipeline layout.",21,N],[12,"push_constants","","Push constants in pipeline layout.",21,N],[3,"Pipeline","","Pipeline info",N,N],[12,"layout","","Layout for pipeline.",22,N],[12,"vertices","","Vertex input for pipeline.",22,N],[12,"colors","","Colors for pipeline.",22,N],[12,"depth_stencil","","Depth stencil for pipeline.",22,N],[3,"RenderPassNode","","Render pass node.",N,N],[8,"RenderPass","","Render pass.",N,N],[10,"name","","Pass name.",23,[[],["str"]]],[11,"buffers","","Get set or buffer resources the node uses.",23,[[],["vec",["bufferaccess"]]]],[11,"images","","Get set or image resources the node uses.",23,[[],["vec",["imageaccess"]]]],[11,"colors","","Number of color output images.",23,[[],["usize"]]],[11,"depth","","Is depth image used.",23,[[],["bool"]]],[11,"layouts","","Pipeline layouts",23,[[],["vec",["layout"]]]],[11,"vertices","","Get vertex input.",23,[[],["vec"]]],[11,"pipelines","","Graphics pipelines",23,[[],["vec",["pipeline"]]]],[11,"builder","","Create `NodeBuilder` for this node.",23,[[],["nodebuilder"]]],[10,"load_shader_sets","","Load shader set. This function should create required shader modules and fill `GraphicsShaderSet` structure.",23,[[["vec"],["factory"],["t"]],["vec",["graphicsshaderset"]]]],[10,"build","","Build pass instance.",23,N],[11,"prepare","","Prepare to record drawing commands.",23,[[["self"],["factory"],["t"]],["bool"]]],[10,"draw","","Record drawing commands to the command buffer provided.",23,N],[10,"dispose","","Dispose of the pass.",23,N],[3,"GraphBuilder","rendy::graph","Build graph from nodes and resource.",N,N],[8,"NodeSubmittable","","NodeSubmittable",N,N],[16,"Submittable","","Submittable type returned from `Node`.",24,N],[16,"Submittables","","Iterator over submittables returned from `Node`.",24,N],[5,"gfx_release_barriers","","Convert graph barriers into gfx barriers.",N,N],[3,"NodeBuffer","","Buffer shared between nodes.",N,N],[12,"buffer","","Buffer reference.",25,N],[12,"range","","Region of the buffer that is the transient resource.",25,N],[12,"acquire","","Acquire barrier. Node implementation must insert it before first command that uses the buffer. Barrier must be inserted even if this node doesn't use the buffer.",25,N],[12,"release","","Release barrier. Node implementation must insert it after last command that uses the buffer. Barrier must be inserted even if this node doesn't use the buffer.",25,N],[3,"ImageBarrier","","Image pipeline barrier. Node implementation must insert it before first command that uses the image. Barrier must be inserted even if this node doesn't use the image.",N,N],[12,"states","","State transition for the image.",26,N],[12,"stages","","Stages at which image is accessd.",26,N],[12,"families","","Transfer between families.",26,N],[8,"AnyNodeDesc","","Trait-object safe `NodeDesc`.",N,N],[10,"family","","Find family suitable for the node.",27,N],[11,"buffers","","Get buffer resource states.",27,[[["self"]],["vec",["bufferaccess"]]]],[11,"images","","Get image resource states.",27,[[["self"]],["vec",["imageaccess"]]]],[10,"build","","Build the node.",27,N],[11,"builder","","Make node builder.",27,[[["self"]],["nodebuilder"]]],[3,"NodeImage","","Image shared between nodes.",N,N],[12,"image","","Image reference.",28,N],[12,"range","","Region of the image that is the transient resource.",28,N],[12,"layout","","Image state for node.",28,N],[12,"clear","","Specify that node should clear image to this value.",28,N],[12,"acquire","","Acquire barrier. Node implementation must insert it before first command that uses the image. Barrier must be inserted even if this node doesn't use the image.",28,N],[12,"release","","Release barrier. Node implementation must insert it after last command that uses the image. Barrier must be inserted even if this node doesn't use the image.",28,N],[5,"gfx_acquire_barriers","","Convert graph barriers into gfx barriers.",N,N],[8,"Node","","The node is building block of the framegraph. Node defines set of resources and operations to perform over them. Read-only data for operations comes from auxiliary data source `T`.",N,N],[16,"Capability","","Capability required by node. Graph will execute this node on command queue that supports this capability level.",29,N],[16,"Desc","","Description type to instantiate the node.",29,N],[11,"desc","","Desc creation. Convenient method if builder implements `Default`.",29,N],[11,"builder","","Builder creation.",29,[[],["nodebuilder"]]],[10,"run","","Record commands required by node. Returned submits are guaranteed to be submitted within specified frame.",29,N],[10,"dispose","","Dispose of the node.",29,N],[3,"NodeBuilder","","Builder for the node.",N,N],[8,"AnyNode","","Trait-object safe `Node`.",N,N],[10,"run","","Record commands required by node. Recorded buffers go into `submits`.",30,N],[10,"dispose","","Dispose of the node.",30,N],[8,"NodeDesc","","Builder of the node. Implementation of the builder type provide framegraph with static information about node that is used for building the node.",N,N],[16,"Node","","Node this builder builds.",31,N],[11,"builder","","Make node builder.",31,[[["self"]],["nodebuilder"]]],[11,"buffers","","Get set or buffer resources the node uses.",31,[[["self"]],["vec",["bufferaccess"]]]],[11,"images","","Get set or image resources the node uses.",31,[[["self"]],["vec",["imageaccess"]]]],[10,"build","","Build the node.",31,N],[3,"BufferAccess","","Buffer access node will perform. Node must not perform any access to the buffer not specified in `access`. All access must be between logically first and last `stages`.",N,N],[12,"access","","Access flags.",32,N],[12,"usage","","Intended usage flags for buffer. TODO: Could derive from access?",32,N],[12,"stages","","Pipeline stages at which buffer is accessd.",32,N],[8,"Block","rendy::memory","Block that owns a `Range` of the `Memory`. Implementor must ensure that there can't be any other blocks with overlapping range (either through type system or safety notes for unsafe functions). Provides access to safe memory range mapping.",N,N],[10,"properties","","Get memory properties of the block.",33,[[["self"]],["properties"]]],[10,"memory","","Get raw memory object.",33,N],[10,"range","","Get memory range owned by this block.",33,[[["self"]],["range",["u64"]]]],[10,"map","","Get mapping for the buffer range. Memory writes to the region performed by device become available for the host.",33,[[["self"],["impl gfx_hal::device<b>"],["range",["u64"]]],["result",["mappedrange","error"]]]],[10,"unmap","","Release memory mapping. Must be called after successful `map` call. No-op if block is not mapped.",33,N],[3,"Coherent","","Coherent marker.",N,N],[3,"LinearConfig","","Config for `DynamicAllocator`.",N,N],[12,"linear_size","","Size of the linear chunk. Keep it big.",34,N],[8,"Write","","Trait for memory region suitable for host writes.",N,N],[10,"slice","","Get mutable slice of `T` bound to mapped range.",35,N],[11,"write","","Write data into mapped memory sub-region.",35,N],[3,"Memory","","Memory object wrapper. Contains size and properties of the memory.",N,N],[3,"Dynamic","","CPU to GPU data flow with update commands. Used for dynamic buffer data, typically constant buffers. Host access is guaranteed. Prefers memory with fast GPU access.",N,N],[3,"LinearBlock","","Memory block allocated from `LinearAllocator`",N,N],[3,"DynamicAllocator","","Low-fragmentation allocator. Suitable for any type of small allocations. Have up to `block_size_granularity - 1` memory overhead. Every freed block can be recycled independently. Memory objects can be returned to the system if whole memory object become unused (not implemented yet).",N,N],[3,"HeapsConfig","","Config for `Heaps` allocator.",N,N],[12,"linear","","Config for linear sub-allocator.",36,N],[12,"dynamic","","Config for dynamic sub-allocator.",36,N],[3,"Upload","","CPU to GPU data flow with mapping. Used for staging data before copying to the `Data` memory. Host access is guaranteed.",N,N],[3,"NonCoherent","","Non-coherent marker.",N,N],[3,"LinearAllocator","","Linear allocator that return memory from chunk sequentially. It keeps only number of bytes allocated from each chunk. Once chunk is exhausted it is placed into list. When all blocks allocated from head of that list are freed, head is freed as well.",N,N],[4,"Kind","","Allocator kind.",N,N],[13,"Dedicated","","Memory object per allocation.",37,N],[13,"Dynamic","","General purpose allocator.",37,N],[13,"Linear","","Allocates linearly. Fast and low overhead. Suitable for one-time-use allocations.",37,N],[3,"Heaps","","Heaps available on particular physical device.",N,N],[3,"MaybeCoherent","","Value that contains either coherent marker or non-coherent marker.",N,N],[3,"Download","","GPU to CPU data flow with mapping. Used for copying data from `Data` memory to be read by the host. Host access is guaranteed.",N,N],[3,"DedicatedAllocator","","Dedicated memory allocator that uses memory object per allocation requested.",N,N],[8,"Allocator","","Allocator trait implemented for various allocators.",N,N],[16,"Block","","Block type returned by allocator.",38,N],[10,"kind","","Get allocator kind.",38,[[],["kind"]]],[10,"alloc","","Allocate block of memory. On success returns allocated block and amount of memory consumed from device.",38,[[["self"],["impl gfx_hal::device<b>"],["u64"],["u64"]],["result",["allocationerror"]]]],[10,"free","","Free block of memory. Returns amount of memory returned to the device.",38,N],[4,"HeapsError","","Possible errors returned by `Heaps`.",N,N],[13,"AllocationError","","Memory allocation failure.",39,N],[13,"NoSuitableMemory","","No memory types among required for resource with requested properties was found.",39,N],[3,"DynamicConfig","","Config for `DynamicAllocator`.",N,N],[12,"blocks_per_chunk","","Number of blocks per chunk. It is advised to keep this equal to bits count in `usize`.",40,N],[12,"block_size_granularity","","All requests are rounded up to multiple of this value.",40,N],[12,"max_block_size","","Maximum block size. For any request larger than this won't be allocated with this allocator.",40,N],[4,"MemoryUsageValue","","Well-known memory usage types.",N,N],[13,"Data","","See [`Data`]",41,N],[13,"Dynamic","","See [`Dynamic`]",41,N],[13,"Upload","","See [`Upload`]",41,N],[13,"Download","","See [`Download`]",41,N],[3,"DedicatedBlock","","Memory block allocated from `DedicatedAllocator`",N,N],[3,"MappedRange","","Represents range of the memory mapped to the host. Provides methods for safer host access to the memory.",N,N],[3,"Data","","Full speed GPU access. Optimal for render targets and persistent resources. Avoid memory with host access.",N,N],[8,"MemoryUsage","","Memory usage trait.",N,N],[10,"properties_required","","Get set of properties required for the usage.",42,[[["self"]],["properties"]]],[10,"memory_fitness","","Get comparable fitness value for memory properties.",42,[[["self"],["properties"]],["u32"]]],[10,"allocator_fitness","","Get comparable fitness value for memory allocator.",42,[[["self"],["kind"]],["u32"]]],[3,"DynamicBlock","","Memory block allocated from `DynamicAllocator`",N,N],[3,"MemoryBlock","","Memory block allocated from `Heaps`.",N,N],[3,"IndexBuffer","rendy::mesh","Index buffer with it's type",N,N],[3,"PosNormTangTex","","Vertex format with position, normal, tangent, and UV texture coordinate attributes.",N,N],[12,"position","","Position of the vertex in 3D space.",43,N],[12,"normal","","Normal vector of the vertex.",43,N],[12,"tangent","","Tangent vector of the vertex.",43,N],[12,"tex_coord","","UV texture coordinates used by the vertex.",43,N],[8,"WithAttribute","","Trait implemented by all valid vertex formats for each field",N,N],[18,"ATTRIBUTE","","Individual format of the attribute for this vertex format",44,N],[3,"Incompatible","","failure::Error type returned by `Mesh::bind` in case of mesh's vertex buffers are incompatible with requested vertex formats.",N,N],[3,"VertexBuffer","","Vertex buffer with it's format",N,N],[3,"PosNorm","","Vertex format with position and normal attributes.",N,N],[12,"position","","Position of the vertex in 3D space.",45,N],[12,"normal","","Normal vector of the vertex.",45,N],[3,"Color","","Type for color attribute of vertex",N,N],[12,"0","","",46,N],[3,"VertexFormat","","Vertex format contains information to initialize graphics pipeline Attributes must be sorted by offset.",N,N],[12,"attributes","","Attributes for format.",47,N],[12,"stride","","Size of single vertex.",47,N],[3,"Position","","Type for position attribute of vertex.",N,N],[12,"0","","",48,N],[3,"MeshBuilder","","Generics-free mesh builder. Useful for creating mesh from non-predefined set of data. Like from glTF.",N,N],[3,"PosColor","","Vertex format with position and RGBA8 color attributes.",N,N],[12,"position","","Position of the vertex in 3D space.",49,N],[12,"color","","RGBA color value of the vertex.",49,N],[6,"Attribute","","Vertex attribute type.",N,N],[3,"Mesh","","Single mesh is a collection of buffers that provides available attributes. Exactly one mesh is used per drawing call in common.",N,N],[8,"AsVertex","","Trait implemented by all valid vertex formats.",N,N],[18,"VERTEX","","List of all attributes formats with name and offset.",50,N],[11,"attribute","","Returns attribute of vertex by type",50,[[],["element",["format"]]]],[3,"TexCoord","","Type for texture coord attribute of vertex",N,N],[12,"0","","",51,N],[4,"Bind","","Result of buffers bindings. It only contains `IndexBufferView` (if index buffers exists) and vertex count. Vertex buffers are in separate `VertexBufferSet`",N,N],[13,"Indexed","","Indexed binding.",52,N],[12,"buffer","rendy::mesh::Bind","The buffer to bind.",52,N],[12,"offset","","The offset into the buffer to start at.",52,N],[12,"index_type","","The type of the table elements (`u16` or `u32`).",52,N],[12,"count","","Indices count to use in `draw_indexed` method.",52,N],[12,"vertex","","Vertex buffers.",52,N],[13,"Unindexed","rendy::mesh","Not indexed binding.",52,N],[12,"count","rendy::mesh::Bind","Vertex count to use in `draw` method.",52,N],[12,"vertex","","Vertex buffers.",52,N],[3,"PosNormTex","rendy::mesh","Vertex format with position, normal and UV texture coordinate attributes.",N,N],[12,"position","","Position of the vertex in 3D space.",53,N],[12,"normal","","Normal vector of the vertex.",53,N],[12,"tex_coord","","UV texture coordinates used by the vertex.",53,N],[3,"Tangent","","Type for tangent attribute of vertex",N,N],[12,"0","","",54,N],[3,"PosTex","","Vertex format with position and UV texture coordinate attributes.",N,N],[12,"position","","Position of the vertex in 3D space.",55,N],[12,"tex_coord","","UV texture coordinates used by the vertex.",55,N],[4,"Indices","","Abstracts over two types of indices and their absence.",N,N],[13,"None","","No indices.",56,N],[13,"U16","","`u16` per index.",56,N],[13,"U32","","`u32` per index.",56,N],[3,"Normal","","Type for texture coord attribute of vertex",N,N],[12,"0","","",57,N],[8,"AsAttribute","","Trait for vertex attributes to implement",N,N],[18,"NAME","","Name of the attribute",58,N],[18,"SIZE","","Size of the attribute.",58,N],[18,"FORMAT","","Attribute format.",58,N],[8,"Query","","Allows to query specific `Attribute`s of `AsVertex`",N,N],[18,"QUERIED_ATTRIBUTES","","Attributes from tuple `T`",59,N],[0,"buffer","rendy::resource","Buffer usage, creation-info and wrappers.",N,N],[3,"Info","rendy::resource::buffer","Buffer info.",N,N],[12,"size","","Buffer size.",60,N],[12,"usage","","Buffer usage flags.",60,N],[3,"Buffer","","Generic buffer object wrapper.",N,N],[8,"Usage","","Usage trait that must implemented by usage types. This trait provides a way to convert type-level usage to the value-level flags.",N,N],[16,"MemoryUsage","","Suggested memory usage type.",61,N],[10,"flags","","Convert usage to the flags.",61,[[["self"]],["usage"]]],[10,"memory","","Get suggested memory usage.",61,N],[3,"VertexBuffer","","Type that specify that buffer is intended to be used as vertex buffer. It implies `TRANSFER_DST` because device-local, host-invisible memory should be used and transfer is left the only way to fill the buffer.",N,N],[3,"IndexBuffer","","Type that specify that buffer is intended to be used as index buffer. It implies `TRANSFER_DST` because device-local, host-invisible memory should be used and transfer is left the only way to fill the buffer.",N,N],[3,"UploadBuffer","","Type that specify that buffer is intended to be used as staging buffer for data uploads.",N,N],[3,"DownloadBuffer","","Type that specify that buffer is intended to be used as staging buffer for data downloads.",N,N],[3,"UniformBuffer","","Type that specify that buffer is intended to be used as uniform buffer. Host visible memory required and device-local preferred.",N,N],[0,"image","rendy::resource","Image usage, format, kind, extent, creation-info and wrappers.",N,N],[3,"Info","rendy::resource::image","Image info.",N,N],[12,"kind","","Kind of the image.",62,N],[12,"levels","","Image mip-level count.",62,N],[12,"format","","Image format.",62,N],[12,"tiling","","Image tiling mode.",62,N],[12,"view_caps","","Image view capabilities.",62,N],[12,"usage","","Image usage flags.",62,N],[3,"Image","","Generic image object wrapper.",N,N],[3,"Texture","","Type that specify that image is intended to be used as texture. It implies `TRANSFER_DST` because device-local, host-invisible memory should be used and transfer is left the only way to fill the buffer.",N,N],[3,"RenderTargetStorage","","Type that specify that image is intended to be used as render target and storage image.",N,N],[8,"Usage","","Usage trait that must implemented by usage types. This trait provides a way to convert type-level usage to the value-level flags.",N,N],[16,"MemoryUsage","","Suggested memory usage type.",63,N],[10,"flags","","Convert usage to the flags.",63,[[["self"]],["usage"]]],[10,"memory","","Get suggested memory usage.",63,N],[3,"RenderTargetSampled","","Type that specify that image is intended to be used as render target and sampled image.",N,N],[3,"Resources","rendy::resource","Resource manager. It can be used to create and destroy resources such as buffers and images.",N,N],[3,"KeepAlive","","Values of `KeepAlive` keeps resources from destroying.",N,N],[8,"Shader","rendy::shader","Interface to create shader modules from shaders. Implemented for static shaders via [`compile_to_spirv!`] macro.",N,N],[10,"spirv","","Get spirv bytecode.",64,[[["self"]],["result",["cow","error"]]]],[11,"module","","Create shader module.",64,[[["self"],["factory"]],["result",["error"]]]],[3,"ShaderInfo","","Dynamic shader.",N,N],[6,"StaticShaderInfo","","Shader info with static data.",N,N],[4,"Error","rendy::shader::shaderc","Error.",N,N],[13,"CompilationError","","Compilation error.",65,N],[13,"InternalError","","",65,N],[13,"InvalidStage","","",65,N],[13,"InvalidAssembly","","",65,N],[13,"NullResultObject","","",65,N],[6,"Result","","Compilation status.",N,N],[4,"TargetEnv","","Target environment.",N,N],[13,"Vulkan","","Compile under Vulkan semantics.",66,N],[13,"OpenGL","","Compile under OpenGL semantics.",66,N],[13,"OpenGLCompat","","Compile under OpenGL semantics, including compatibility profile functions.",66,N],[4,"SourceLanguage","","Source language.",N,N],[13,"GLSL","","",67,N],[13,"HLSL","","",67,N],[4,"ResourceKind","","Resource kinds.",N,N],[13,"Image","","Image and image buffer.",68,N],[13,"Sampler","","Pure sampler.",68,N],[13,"Texture","","Sampled texture in GLSL, and Shader Resource View in HLSL.",68,N],[13,"Buffer","","Uniform Buffer Object (UBO) in GLSL. cbuffer in HLSL.",68,N],[13,"StorageBuffer","","Shader Storage Buffer Object (SSBO) in GLSL.",68,N],[13,"UnorderedAccessView","","Unordered Access View in HLSL. (Writable storage image or storage buffer.)",68,N],[4,"ShaderKind","","Shader kind.",N,N],[13,"Vertex","","",69,N],[13,"Fragment","","",69,N],[13,"Compute","","",69,N],[13,"Geometry","","",69,N],[13,"TessControl","","",69,N],[13,"TessEvaluation","","",69,N],[13,"InferFromSource","","Deduce the shader kind from `#pragma` directives in the source code.",69,N],[13,"DefaultVertex","","",69,N],[13,"DefaultFragment","","",69,N],[13,"DefaultCompute","","",69,N],[13,"DefaultGeometry","","",69,N],[13,"DefaultTessControl","","",69,N],[13,"DefaultTessEvaluation","","",69,N],[13,"SpirvAssembly","","",69,N],[4,"GlslProfile","","GLSL profile.",N,N],[13,"None","","Used iff GLSL version did not specify the profile",70,N],[13,"Core","","",70,N],[13,"Compatibility","","",70,N],[13,"Es","","",70,N],[4,"OptimizationLevel","","Optimization level.",N,N],[13,"Zero","","No optimization",71,N],[13,"Size","","Optimize towards reducing code size",71,N],[13,"Performance","","",71,N],[4,"Limit","","Resource limit.",N,N],[13,"MaxLights","","",72,N],[13,"MaxClipPlanes","","",72,N],[13,"MaxTextureUnits","","",72,N],[13,"MaxTextureCoords","","",72,N],[13,"MaxVertexAttribs","","",72,N],[13,"MaxVertexUniformComponents","","",72,N],[13,"MaxVaryingFloats","","",72,N],[13,"MaxVertexTextureImageUnits","","",72,N],[13,"MaxCombinedTextureImageUnits","","",72,N],[13,"MaxTextureImageUnits","","",72,N],[13,"MaxFragmentUniformComponents","","",72,N],[13,"MaxDrawBuffers","","",72,N],[13,"MaxVertexUniformVectors","","",72,N],[13,"MaxVaryingVectors","","",72,N],[13,"MaxFragmentUniformVectors","","",72,N],[13,"MaxVertexOutputVectors","","",72,N],[13,"MaxFragmentInputVectors","","",72,N],[13,"MinProgramTexelOffset","","",72,N],[13,"MaxProgramTexelOffset","","",72,N],[13,"MaxClipDistances","","",72,N],[13,"MaxComputeWorkGroupCountX","","",72,N],[13,"MaxComputeWorkGroupCountY","","",72,N],[13,"MaxComputeWorkGroupCountZ","","",72,N],[13,"MaxComputeWorkGroupSizeX","","",72,N],[13,"MaxComputeWorkGroupSizeY","","",72,N],[13,"MaxComputeWorkGroupSizeZ","","",72,N],[13,"MaxComputeUniformComponents","","",72,N],[13,"MaxComputeTextureImageUnits","","",72,N],[13,"MaxComputeImageUniforms","","",72,N],[13,"MaxComputeAtomicCounters","","",72,N],[13,"MaxComputeAtomicCounterBuffers","","",72,N],[13,"MaxVaryingComponents","","",72,N],[13,"MaxVertexOutputComponents","","",72,N],[13,"MaxGeometryInputComponents","","",72,N],[13,"MaxGeometryOutputComponents","","",72,N],[13,"MaxFragmentInputComponents","","",72,N],[13,"MaxImageUnits","","",72,N],[13,"MaxCombinedImageUnitsAndFragmentOutputs","","",72,N],[13,"MaxCombinedShaderOutputResources","","",72,N],[13,"MaxImageSamples","","",72,N],[13,"MaxVertexImageUniforms","","",72,N],[13,"MaxTessControlImageUniforms","","",72,N],[13,"MaxTessEvaluationImageUniforms","","",72,N],[13,"MaxGeometryImageUniforms","","",72,N],[13,"MaxFragmentImageUniforms","","",72,N],[13,"MaxCombinedImageUniforms","","",72,N],[13,"MaxGeometryTextureImageUnits","","",72,N],[13,"MaxGeometryOutputVertices","","",72,N],[13,"MaxGeometryTotalOutputComponents","","",72,N],[13,"MaxGeometryUniformComponents","","",72,N],[13,"MaxGeometryVaryingComponents","","",72,N],[13,"MaxTessControlInputComponents","","",72,N],[13,"MaxTessControlOutputComponents","","",72,N],[13,"MaxTessControlTextureImageUnits","","",72,N],[13,"MaxTessControlUniformComponents","","",72,N],[13,"MaxTessControlTotalOutputComponents","","",72,N],[13,"MaxTessEvaluationInputComponents","","",72,N],[13,"MaxTessEvaluationOutputComponents","","",72,N],[13,"MaxTessEvaluationTextureImageUnits","","",72,N],[13,"MaxTessEvaluationUniformComponents","","",72,N],[13,"MaxTessPatchComponents","","",72,N],[13,"MaxPatchVertices","","",72,N],[13,"MaxTessGenLevel","","",72,N],[13,"MaxViewports","","",72,N],[13,"MaxVertexAtomicCounters","","",72,N],[13,"MaxTessControlAtomicCounters","","",72,N],[13,"MaxTessEvaluationAtomicCounters","","",72,N],[13,"MaxGeometryAtomicCounters","","",72,N],[13,"MaxFragmentAtomicCounters","","",72,N],[13,"MaxCombinedAtomicCounters","","",72,N],[13,"MaxAtomicCounterBindings","","",72,N],[13,"MaxVertexAtomicCounterBuffers","","",72,N],[13,"MaxTessControlAtomicCounterBuffers","","",72,N],[13,"MaxTessEvaluationAtomicCounterBuffers","","",72,N],[13,"MaxGeometryAtomicCounterBuffers","","",72,N],[13,"MaxFragmentAtomicCounterBuffers","","",72,N],[13,"MaxCombinedAtomicCounterBuffers","","",72,N],[13,"MaxAtomicCounterBufferSize","","",72,N],[13,"MaxTransformFeedbackBuffers","","",72,N],[13,"MaxTransformFeedbackInterleavedComponents","","",72,N],[13,"MaxCullDistances","","",72,N],[13,"MaxCombinedClipAndCullDistances","","",72,N],[13,"MaxSamples","","",72,N],[3,"Compiler","","An opaque object managing all compiler states.",N,N],[3,"CompileOptions","","An opaque object managing options to compilation.",N,N],[4,"IncludeType","","Identifies the type of include directive. `Relative` is for include directives of the form `#include \"...\"`, and `Standard` is for include directives of the form `#include <...>`.",N,N],[13,"Relative","","",73,N],[13,"Standard","","",73,N],[3,"ResolvedInclude","","A representation of a successfully resolved include directive, containing the name of the include and its contents.",N,N],[12,"resolved_name","","A name uniquely identifying the resolved include. Typically the absolute path of the file.",74,N],[12,"content","","The content of the include to substitute the include directive with.",74,N],[3,"CompilationArtifact","","An opaque object containing the results of compilation.",N,N],[5,"get_spirv_version","","Returns the version and revision of the SPIR-V generated by this library.",N,N],[5,"parse_version_profile","","Parses the version and profile from the given `string`.",N,[[["str"]],["option"]]],[5,"is_slice_sorted","rendy::util","Chech if slice o f ordered values is sorted.",N,N],[5,"is_slice_sorted_by_key","","Check if slice is sorted using ordered key and key extractor",N,N],[5,"cast_vec","","Cast vec of some arbitrary type into vec of bytes.",N,[[["vec"]],["vec",["u8"]]]],[5,"cast_slice","","Cast slice of some arbitrary type into slice of bytes.",N,N],[5,"cast_cow","","Cast `cow` of some arbitrary type into `cow` of bytes.",N,[[["cow"]],["cow"]]],[3,"Surface","rendy::wsi","Rendering target bound to window.",N,N],[3,"Target","","Rendering target bound to window. With swapchain created.",N,N],[3,"NextImages","","Represents acquire frames that will be presented next.",N,N],[11,"from","rendy::command","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"to_owned","rendy::factory","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","rendy::frame::cirque","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"from","rendy::frame","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"to_owned","rendy::graph","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","rendy::graph::present","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"from","rendy::graph","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"to_owned","rendy::graph::render","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"from","rendy::graph","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"to_owned","rendy::memory","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"as_fail","","",39,[[["self"]],["fail"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"from","rendy::mesh","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"to_owned","","",138,[[["self"]],["t"]]],[11,"clone_into","","",138,N],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,N],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"to_owned","rendy::resource::buffer","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,N],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,N],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,N],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,N],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,N],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"to_owned","rendy::resource::image","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,N],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,N],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,N],[11,"from","","",151,[[["t"]],["t"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"from","rendy::resource","",152,[[["t"]],["t"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,N],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"to_owned","rendy::shader","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,N],[11,"from","","",154,[[["t"]],["t"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"to_string","rendy::shader::shaderc","",65,[[["self"]],["string"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"as_fail","","",65,[[["self"]],["fail"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"from","rendy::wsi","",158,[[["t"]],["t"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"from_queue_type","rendy::command","",99,[[["queuetype"]],["option",["compute"]]]],[11,"into_queue_type","","",99,[[["self"]],["queuetype"]]],[11,"from_queue_type","","",84,[[["queuetype"]],["option",["graphics"]]]],[11,"into_queue_type","","",84,[[["self"]],["queuetype"]]],[11,"from_queue_type","","",79,[[["queuetype"]],["option",["general"]]]],[11,"into_queue_type","","",79,[[["self"]],["queuetype"]]],[11,"from_queue_type","","",78,[[["queuetype"]],["option",["transfer"]]]],[11,"into_queue_type","","",78,[[["self"]],["queuetype"]]],[11,"from_queue_type","","",76,[[["queuetype"]],["option",["execute"]]]],[11,"into_queue_type","","",76,[[["self"]],["queuetype"]]],[11,"family","","",96,[[["self"]],["queuefamilyid"]]],[11,"raw","","",96,N],[11,"clone","","",79,[[["self"]],["general"]]],[11,"clone","","",10,[[["self"]],["dispatchcommand"]]],[11,"clone","","",87,[[["self"]],["individualreset"]]],[11,"clone","","",99,[[["self"]],["compute"]]],[11,"clone","","",80,[[["self"]],["invalidstate"]]],[11,"clone","","",76,[[["self"]],["execute"]]],[11,"clone","","",78,[[["self"]],["transfer"]]],[11,"clone","","",84,[[["self"]],["graphics"]]],[11,"clone","","",93,[[["self"]],["initialstate"]]],[11,"clone","","",82,[[["self"]],["noindividualreset"]]],[11,"clone","","",95,[[["self"]],["secondarylevel"]]],[11,"clone","","",3,[[["self"]],["recordingstate"]]],[11,"clone","","",1,[[["self"]],["pendingstate"]]],[11,"clone","","",4,[[["self"]],["drawcommand"]]],[11,"clone","","",88,[[["self"]],["renderpasscontinue"]]],[11,"clone","","",77,[[["self"]],["oneshot"]]],[11,"clone","","",86,[[["self"]],["nosimultaneoususe"]]],[11,"clone","","",13,[[["self"]],["multishot"]]],[11,"clone","","",94,[[["self"]],["primarylevel"]]],[11,"clone","","",92,[[["self"]],["outsiderenderpass"]]],[11,"clone","","",90,[[["self"]],["simultaneoususe"]]],[11,"clone","","",8,[[["self"]],["executablestate"]]],[11,"flags","","",88,[[["self"]],["commandbufferflags"]]],[11,"flags","","",92,[[["self"]],["commandbufferflags"]]],[11,"raw_level","","",94,[[["self"]],["level"]]],[11,"raw_level","","",95,[[["self"]],["level"]]],[11,"flags","","",87,[[["self"]],["commandpoolcreateflags"]]],[11,"flags","","",82,[[["self"]],["commandpoolcreateflags"]]],[11,"default","","",95,[[],["secondarylevel"]]],[11,"default","","",3,[[],["recordingstate"]]],[11,"default","","",8,[[],["executablestate"]]],[11,"default","","",94,[[],["primarylevel"]]],[11,"default","","",82,[[],["noindividualreset"]]],[11,"default","","",93,[[],["initialstate"]]],[11,"default","","",92,[[],["outsiderenderpass"]]],[11,"default","","",88,[[],["renderpasscontinue"]]],[11,"default","","",86,[[],["nosimultaneoususe"]]],[11,"default","","",13,[[],["multishot"]]],[11,"default","","",90,[[],["simultaneoususe"]]],[11,"default","","",87,[[],["individualreset"]]],[11,"default","","",80,[[],["invalidstate"]]],[11,"default","","",1,[[],["pendingstate"]]],[11,"default","","",77,[[],["oneshot"]]],[11,"drop","","",75,N],[11,"drop","","",98,N],[11,"supports","","",99,[[["self"]],["option",["transfer"]]]],[11,"supports","","",84,[[["self"]],["option",["execute"]]]],[11,"supports","","",99,[[["self"]],["option",["execute"]]]],[11,"supports","","",78,[[["self"]],["option",["transfer"]]]],[11,"supports","","",84,[[["self"]],["option",["transfer"]]]],[11,"supports","","",84,[[["self"]],["option",["graphics"]]]],[11,"supports","","",79,[[["self"]],["option",["transfer"]]]],[11,"supports","","",79,[[["self"]],["option",["graphics"]]]],[11,"supports","","",99,[[["self"]],["option",["compute"]]]],[11,"supports","","",79,[[["self"]],["option",["compute"]]]],[11,"supports","","",79,[[["self"]],["option",["execute"]]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",98,[[["self"]],["renderpassencoder"]]],[11,"deref","","",81,[[["self"]],["encodercommon"]]],[11,"deref","","",89,[[["self"]],["encodercommon"]]],[11,"deref_mut","","",98,[[["self"]],["renderpassencoder"]]],[11,"deref_mut","","",81,[[["self"]],["encodercommon"]]],[11,"deref_mut","","",89,[[["self"]],["encodercommon"]]],[11,"flags","","",77,[[["self"]],["commandbufferflags"]]],[11,"flags","","",13,[[["self"]],["commandbufferflags"]]],[11,"flags","","",86,[[["self"]],["commandbufferflags"]]],[11,"flags","","",13,[[["self"]],["commandbufferflags"]]],[11,"clone","rendy::factory","",16,[[["self"]],["config"]]],[11,"clone","","",102,[[["self"]],["onegraphicsqueue"]]],[11,"clone","","",100,[[["self"]],["savedheapsconfig"]]],[11,"clone","","",103,[[["self"]],["basicheapsconfigure"]]],[11,"clone","","",104,[[["self"]],["savedqueueconfig"]]],[11,"default","","",103,[[],["basicheapsconfigure"]]],[11,"default","","",102,[[],["onegraphicsqueue"]]],[11,"default","","",16,[[],["config"]]],[11,"configure","","",100,N],[11,"configure","","",103,N],[11,"fmt","","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"configure","","",102,N],[11,"configure","","",104,N],[11,"clone","rendy::memory","",37,[[["self"]],["kind"]]],[11,"clone","","",41,[[["self"]],["memoryusagevalue"]]],[11,"clone","","",36,[[["self"]],["heapsconfig"]]],[11,"clone","","",129,[[["self"]],["maybecoherent"]]],[11,"clone","","",120,[[["self"]],["coherent"]]],[11,"clone","","",122,[[["self"]],["dynamic"]]],[11,"clone","","",126,[[["self"]],["noncoherent"]]],[11,"clone","","",134,[[["self"]],["data"]]],[11,"clone","","",40,[[["self"]],["dynamicconfig"]]],[11,"clone","","",34,[[["self"]],["linearconfig"]]],[11,"clone","","",125,[[["self"]],["upload"]]],[11,"clone","","",130,[[["self"]],["download"]]],[11,"partial_cmp","","",37,[[["self"],["kind"]],["option",["ordering"]]]],[11,"kind","","",127,[[],["kind"]]],[11,"alloc","","",127,[[["self"],["impl gfx_hal::device<b>"],["u64"],["u64"]],["result",["allocationerror"]]]],[11,"free","","",127,N],[11,"kind","","",131,[[],["kind"]]],[11,"alloc","","",131,[[["self"],["impl gfx_hal::device<b>"],["u64"],["u64"]],["result",["allocationerror"]]]],[11,"free","","",131,[[["self"],["impl gfx_hal::device<b>"],["dedicatedblock"]],["u64"]]],[11,"kind","","",124,[[],["kind"]]],[11,"alloc","","",124,[[["self"],["impl gfx_hal::device<b>"],["u64"],["u64"]],["result",["allocationerror"]]]],[11,"free","","",124,[[["self"],["impl gfx_hal::device<b>"],["dynamicblock"]],["u64"]]],[11,"cmp","","",37,[[["self"],["kind"]],["ordering"]]],[11,"drop","","",131,N],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"cause","","",39,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",39,[[["self"]],["option",["backtrace"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"properties","","",135,[[["self"]],["properties"]]],[11,"memory","","",135,N],[11,"range","","",135,[[["self"]],["range",["u64"]]]],[11,"map","","",135,[[["self"],["impl gfx_hal::device<b>"],["range",["u64"]]],["result",["mappedrange","error"]]]],[11,"unmap","","",135,N],[11,"properties","","",123,[[["self"]],["properties"]]],[11,"memory","","",123,N],[11,"range","","",123,[[["self"]],["range",["u64"]]]],[11,"map","","",123,[[["self"],["impl gfx_hal::device<b>"],["range",["u64"]]],["result",["mappedrange","error"]]]],[11,"unmap","","",123,N],[11,"properties","","",136,[[["self"]],["properties"]]],[11,"memory","","",136,N],[11,"range","","",136,[[["self"]],["range",["u64"]]]],[11,"map","","",136,[[["self"],["impl gfx_hal::device<b>"],["range",["u64"]]],["result",["mappedrange","error"]]]],[11,"unmap","","",136,N],[11,"properties","","",132,[[["self"]],["properties"]]],[11,"memory","","",132,N],[11,"range","","",132,[[["self"]],["range",["u64"]]]],[11,"map","","",132,[[["self"],["impl gfx_hal::device<b>"],["range",["u64"]]],["result",["mappedrange","error"]]]],[11,"unmap","","",132,N],[11,"from","","",39,[[["allocationerror"]],["heapserror"]]],[11,"from","","",133,[[["mappedrange",["coherent"]]],["mappedrange",["maybecoherent"]]]],[11,"from","","",39,[[["outofmemory"]],["heapserror"]]],[11,"from","","",133,[[["mappedrange",["noncoherent"]]],["mappedrange",["maybecoherent"]]]],[11,"eq","","",41,[[["self"],["memoryusagevalue"]],["bool"]]],[11,"eq","","",37,[[["self"],["kind"]],["bool"]]],[11,"properties_required","","",134,[[["self"]],["properties"]]],[11,"memory_fitness","","",134,[[["self"],["properties"]],["u32"]]],[11,"allocator_fitness","","",134,[[["self"],["kind"]],["u32"]]],[11,"properties_required","","",125,[[["self"]],["properties"]]],[11,"memory_fitness","","",125,[[["self"],["properties"]],["u32"]]],[11,"allocator_fitness","","",125,[[["self"],["kind"]],["u32"]]],[11,"properties_required","","",122,[[["self"]],["properties"]]],[11,"memory_fitness","","",122,[[["self"],["properties"]],["u32"]]],[11,"allocator_fitness","","",122,[[["self"],["kind"]],["u32"]]],[11,"properties_required","","",130,[[["self"]],["properties"]]],[11,"memory_fitness","","",130,[[["self"],["properties"]],["u32"]]],[11,"allocator_fitness","","",130,[[["self"],["kind"]],["u32"]]],[11,"properties_required","","",41,[[["self"]],["properties"]]],[11,"memory_fitness","","",41,[[["self"],["properties"]],["u32"]]],[11,"allocator_fitness","","",41,[[["self"],["kind"]],["u32"]]],[11,"flags","rendy::resource::image","",151,[[["self"]],["usage"]]],[11,"memory","","",151,[[["self"]],["data"]]],[11,"flags","","",150,[[["self"]],["usage"]]],[11,"memory","","",150,[[["self"]],["data"]]],[11,"flags","","",149,[[["self"]],["usage"]]],[11,"memory","","",149,[[["self"]],["data"]]],[11,"clone","rendy::resource","",153,[[["self"]],["keepalive"]]],[11,"clone","rendy::resource::buffer","",145,[[["self"]],["uploadbuffer"]]],[11,"clone","rendy::resource::image","",62,[[["self"]],["info"]]],[11,"clone","rendy::resource::buffer","",147,[[["self"]],["uniformbuffer"]]],[11,"clone","","",146,[[["self"]],["downloadbuffer"]]],[11,"clone","","",143,[[["self"]],["vertexbuffer"]]],[11,"clone","rendy::resource::image","",149,[[["self"]],["texture"]]],[11,"clone","rendy::resource::buffer","",60,[[["self"]],["info"]]],[11,"clone","rendy::resource::image","",151,[[["self"]],["rendertargetsampled"]]],[11,"clone","rendy::resource::buffer","",144,[[["self"]],["indexbuffer"]]],[11,"clone","rendy::resource::image","",150,[[["self"]],["rendertargetstorage"]]],[11,"default","rendy::resource","",152,[[],["resources"]]],[11,"fmt","rendy::resource::image","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::resource","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::resource::buffer","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::resource::image","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::resource","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::resource::buffer","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"flags","","",146,[[["self"]],["usage"]]],[11,"memory","","",146,[[["self"]],["download"]]],[11,"flags","","",143,[[["self"]],["usage"]]],[11,"memory","","",143,[[["self"]],["data"]]],[11,"flags","","",145,[[["self"]],["usage"]]],[11,"memory","","",145,[[["self"]],["upload"]]],[11,"flags","","",147,[[["self"]],["usage"]]],[11,"memory","","",147,[[["self"]],["dynamic"]]],[11,"flags","","",144,[[["self"]],["usage"]]],[11,"memory","","",144,[[["self"]],["data"]]],[11,"index","rendy::wsi","",160,[[["self"],["usize"]],["u32"]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","rendy::frame::cirque","",107,[[],["cirque"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::frame","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::frame::cirque","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::frame","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::frame::cirque","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","rendy::graph::render","",21,[[["self"]],["layout"]]],[11,"clone","","",22,[[["self"]],["pipeline"]]],[11,"clone","rendy::graph","",111,[[["self"]],["bufferid"]]],[11,"clone","","",26,[[["self"]],["imagebarrier"]]],[11,"clone","","",113,[[["self"]],["nodeid"]]],[11,"clone","","",32,[[["self"]],["bufferaccess"]]],[11,"clone","rendy::graph::render","",20,[[["self"]],["setlayout"]]],[11,"clone","rendy::graph","",112,[[["self"]],["imageid"]]],[11,"clone","","",19,[[["self"]],["bufferbarrier"]]],[11,"clone","","",18,[[["self"]],["imageaccess"]]],[11,"partial_cmp","","",112,[[["self"],["imageid"]],["option",["ordering"]]]],[11,"lt","","",112,[[["self"],["imageid"]],["bool"]]],[11,"le","","",112,[[["self"],["imageid"]],["bool"]]],[11,"gt","","",112,[[["self"],["imageid"]],["bool"]]],[11,"ge","","",112,[[["self"],["imageid"]],["bool"]]],[11,"partial_cmp","","",113,[[["self"],["nodeid"]],["option",["ordering"]]]],[11,"lt","","",113,[[["self"],["nodeid"]],["bool"]]],[11,"le","","",113,[[["self"],["nodeid"]],["bool"]]],[11,"gt","","",113,[[["self"],["nodeid"]],["bool"]]],[11,"ge","","",113,[[["self"],["nodeid"]],["bool"]]],[11,"partial_cmp","","",111,[[["self"],["bufferid"]],["option",["ordering"]]]],[11,"lt","","",111,[[["self"],["bufferid"]],["bool"]]],[11,"le","","",111,[[["self"],["bufferid"]],["bool"]]],[11,"gt","","",111,[[["self"],["bufferid"]],["bool"]]],[11,"ge","","",111,[[["self"],["bufferid"]],["bool"]]],[11,"family","rendy::graph::present","",115,N],[11,"images","","",115,[[["self"]],["vec",["imageaccess"]]]],[11,"build","","",115,N],[11,"run","rendy::graph::render","",117,[[["self"],["factory"],["t"],["frames"]],["once",["submit"]]]],[11,"dispose","","",117,N],[11,"run","rendy::graph::present","",114,N],[11,"dispose","","",114,N],[11,"cmp","rendy::graph","",111,[[["self"],["bufferid"]],["ordering"]]],[11,"cmp","","",113,[[["self"],["nodeid"]],["ordering"]]],[11,"cmp","","",112,[[["self"],["imageid"]],["ordering"]]],[11,"default","rendy::graph::render","",20,[[],["setlayout"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::graph","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::graph::present","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::graph::render","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::graph","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::graph::present","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::graph::render","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rendy::graph","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",113,[[["self"],["nodeid"]],["bool"]]],[11,"ne","","",113,[[["self"],["nodeid"]],["bool"]]],[11,"eq","","",111,[[["self"],["bufferid"]],["bool"]]],[11,"ne","","",111,[[["self"],["bufferid"]],["bool"]]],[11,"eq","","",112,[[["self"],["imageid"]],["bool"]]],[11,"ne","","",112,[[["self"],["imageid"]],["bool"]]],[11,"clone","rendy::mesh","",43,[[["self"]],["posnormtangtex"]]],[11,"clone","","",48,[[["self"]],["position"]]],[11,"clone","","",47,[[["self"]],["vertexformat"]]],[11,"clone","","",54,[[["self"]],["tangent"]]],[11,"clone","","",52,[[["self"]],["bind"]]],[11,"clone","","",51,[[["self"]],["texcoord"]]],[11,"clone","","",138,[[["self"]],["incompatible"]]],[11,"clone","","",55,[[["self"]],["postex"]]],[11,"clone","","",53,[[["self"]],["posnormtex"]]],[11,"clone","","",140,[[["self"]],["meshbuilder"]]],[11,"clone","","",45,[[["self"]],["posnorm"]]],[11,"clone","","",46,[[["self"]],["color"]]],[11,"clone","","",57,[[["self"]],["normal"]]],[11,"clone","","",49,[[["self"]],["poscolor"]]],[11,"partial_cmp","","",47,[[["self"],["vertexformat"]],["option",["ordering"]]]],[11,"lt","","",47,[[["self"],["vertexformat"]],["bool"]]],[11,"le","","",47,[[["self"],["vertexformat"]],["bool"]]],[11,"gt","","",47,[[["self"],["vertexformat"]],["bool"]]],[11,"ge","","",47,[[["self"],["vertexformat"]],["bool"]]],[11,"cmp","","",47,[[["self"],["vertexformat"]],["ordering"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",56,[[["vec",["u32"]]],["indices"]]],[11,"from","","",56,[[["vec",["u16"]]],["indices"]]],[11,"from","","",54,[[["t"]],["tangent"]]],[11,"from","","",48,[[["t"]],["position"]]],[11,"from","","",46,[[["t"]],["color"]]],[11,"from","","",56,N],[11,"from","","",56,[[["cow"]],["indices"]]],[11,"from","","",56,[[["cow"]],["indices"]]],[11,"from","","",57,[[["t"]],["normal"]]],[11,"from","","",51,[[["t"]],["texcoord"]]],[11,"from","","",56,N],[11,"eq","","",43,[[["self"],["posnormtangtex"]],["bool"]]],[11,"ne","","",43,[[["self"],["posnormtangtex"]],["bool"]]],[11,"eq","","",54,[[["self"],["tangent"]],["bool"]]],[11,"ne","","",54,[[["self"],["tangent"]],["bool"]]],[11,"eq","","",46,[[["self"],["color"]],["bool"]]],[11,"ne","","",46,[[["self"],["color"]],["bool"]]],[11,"eq","","",55,[[["self"],["postex"]],["bool"]]],[11,"ne","","",55,[[["self"],["postex"]],["bool"]]],[11,"eq","","",57,[[["self"],["normal"]],["bool"]]],[11,"ne","","",57,[[["self"],["normal"]],["bool"]]],[11,"eq","","",47,[[["self"],["vertexformat"]],["bool"]]],[11,"ne","","",47,[[["self"],["vertexformat"]],["bool"]]],[11,"eq","","",48,[[["self"],["position"]],["bool"]]],[11,"ne","","",48,[[["self"],["position"]],["bool"]]],[11,"eq","","",53,[[["self"],["posnormtex"]],["bool"]]],[11,"ne","","",53,[[["self"],["posnormtex"]],["bool"]]],[11,"eq","","",49,[[["self"],["poscolor"]],["bool"]]],[11,"ne","","",49,[[["self"],["poscolor"]],["bool"]]],[11,"eq","","",45,[[["self"],["posnorm"]],["bool"]]],[11,"ne","","",45,[[["self"],["posnorm"]],["bool"]]],[11,"eq","","",51,[[["self"],["texcoord"]],["bool"]]],[11,"ne","","",51,[[["self"],["texcoord"]],["bool"]]],[11,"clone","rendy::shader","",154,[[["self"]],["shaderinfo"]]],[11,"spirv","","",154,[[["self"]],["result",["cow","error"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","rendy::shader::shaderc","",69,[[["self"]],["shaderkind"]]],[11,"clone","","",70,[[["self"]],["glslprofile"]]],[11,"clone","","",73,[[["self"]],["includetype"]]],[11,"clone","","",66,[[["self"]],["targetenv"]]],[11,"clone","","",68,[[["self"]],["resourcekind"]]],[11,"clone","","",74,[[["self"]],["resolvedinclude"]]],[11,"clone","","",72,[[["self"]],["limit"]]],[11,"clone","","",71,[[["self"]],["optimizationlevel"]]],[11,"clone","","",67,[[["self"]],["sourcelanguage"]]],[11,"partial_cmp","","",74,[[["self"],["resolvedinclude"]],["option",["ordering"]]]],[11,"lt","","",74,[[["self"],["resolvedinclude"]],["bool"]]],[11,"le","","",74,[[["self"],["resolvedinclude"]],["bool"]]],[11,"gt","","",74,[[["self"],["resolvedinclude"]],["bool"]]],[11,"ge","","",74,[[["self"],["resolvedinclude"]],["bool"]]],[11,"partial_cmp","","",73,[[["self"],["includetype"]],["option",["ordering"]]]],[11,"cmp","","",74,[[["self"],["resolvedinclude"]],["ordering"]]],[11,"cmp","","",73,[[["self"],["includetype"]],["ordering"]]],[11,"description","","",65,[[["self"]],["str"]]],[11,"drop","","",156,N],[11,"drop","","",157,N],[11,"drop","","",155,N],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",74,N],[11,"hash","","",73,N],[11,"eq","","",74,[[["self"],["resolvedinclude"]],["bool"]]],[11,"ne","","",74,[[["self"],["resolvedinclude"]],["bool"]]],[11,"eq","","",70,[[["self"],["glslprofile"]],["bool"]]],[11,"eq","","",72,[[["self"],["limit"]],["bool"]]],[11,"eq","","",73,[[["self"],["includetype"]],["bool"]]],[11,"eq","","",67,[[["self"],["sourcelanguage"]],["bool"]]],[11,"eq","","",66,[[["self"],["targetenv"]],["bool"]]],[11,"eq","","",68,[[["self"],["resourcekind"]],["bool"]]],[11,"eq","","",69,[[["self"],["shaderkind"]],["bool"]]],[11,"eq","","",65,[[["self"],["error"]],["bool"]]],[11,"ne","","",65,[[["self"],["error"]],["bool"]]],[11,"eq","","",71,[[["self"],["optimizationlevel"]],["bool"]]],[11,"execute_commands","rendy::command","Execute commands from secondary buffers.",75,N],[11,"next_subpass_inline","","Record next subpass inline.",75,[[["self"]],["renderpassinlineencoder"]]],[11,"next_subpass_secondary","","Record next subpass secondary.",75,[[["self"]],["renderpasssecondaryencoder"]]],[11,"draw","","Draw.",81,N],[11,"draw_indexed","","Draw indexed.",81,N],[11,"draw_indirect","","Draw indirect. Similar to [`draw`] except takes vertices and indices from `buffer` at specified `offset`. `buffer` must contain `draw_count` of [`DrawCommand`] starting from `offset` with `stride` bytes between each.",81,N],[11,"from_device","","Query queue family from device.",83,[[["queues"],["queuefamilyid"],["usize"],["impl gfx_hal::queue::queuefamily"]],["family",["queuetype"]]]],[11,"index","","Get id of the family.",83,[[["self"]],["queuefamilyid"]]],[11,"queues","","Get queues of the family.",83,N],[11,"queues_mut","","Get queues of the family.",83,N],[11,"submit","","Submit commands to the queue of the family.",83,N],[11,"create_pool","","Create command pool associated with the family. Command buffers created from the pool could be submitted to the queues of the family.",83,[[["self"],["impl gfx_hal::device<b>"]],["result",["commandpool","outofmemory"]]]],[11,"capability","","Get family capability.",83,[[["self"]],["c"]]],[11,"dispose","","Dispose of queue family container.",83,N],[11,"with_queue_type","","Convert capability from type-level to value-level.",83,[[["self"]],["family",["queuetype"]]]],[11,"with_capability","","Convert capability into type-level one.",83,[[["self"]],["result",["family","family"]]]],[11,"from_raw","","Wrap raw command pool.",85,N],[11,"allocate_buffers","","Allocate new command buffers.",85,[[["self"],["usize"]],["vec",["commandbuffer"]]]],[11,"free_buffers","","Free buffers. Buffers must be in droppable state. TODO: Validate buffers were allocated from this pool.",85,N],[11,"reset","","Reset all buffers of this pool.",85,N],[11,"dispose","","Dispose of command pool.",85,N],[11,"with_queue_type","","Convert capability level",85,[[["self"]],["commandpool",["queuetype"]]]],[11,"with_capability","","Convert capability level",85,[[["self"]],["result",["commandpool","commandpool"]]]],[11,"begin_render_pass_inline","","Beging recording render pass inline.",89,N],[11,"begin_render_pass_secondary","","Beging recording render pass secondary.",89,N],[11,"execute_commands","","Execute commands from secondary buffers.",89,N],[11,"level","","Get encoder level.",89,[[["self"]],["l"]]],[11,"copy_image","","Copy image regions.",89,N],[11,"dispatch","","Dispatch compute.",89,N],[11,"dispatch_indirect","","Dispatch indirect. Similar to [`dispatch`] except takes vertices and indices from `buffer` at specified `offset`. `buffer` must contain [`DispatchCommand`] at `offset`.",89,N],[11,"encoder","","Get encoder that will encode commands into this command buffer.",91,[[["self"]],["encoder"]]],[11,"render_pass_encoder","","Get encoder that will encode render-pass commands into this command buffer.",91,[[["self"]],["renderpassencoder"]]],[11,"submit_once","","Produce `Submit` object that can be used to populate submission.",91,N],[11,"submit","","Produce `Submit` object that can be used to populate submission.",91,N],[11,"change_state","","Change state of the command buffer.",91,[[["self"],["impl fnonce(s) -> u"]],["commandbuffer"]]],[11,"capability","","Get buffers capability.",91,[[["self"]],["c"]]],[11,"family","","Get buffers family.",91,[[["self"]],["queuefamilyid"]]],[11,"with_queue_type","","Convert capability level.",91,[[["self"]],["commandbuffer",["queuetype"]]]],[11,"with_capability","","Convert capability level.",91,[[["self"]],["result",["commandbuffer","commandbuffer"]]]],[11,"begin","","Begin recording command buffer.",91,[[["self"]],["commandbuffer",["recordingstate"]]]],[11,"finish","","Finish recording command buffer.",91,[[["self"]],["commandbuffer",["executablestate"]]]],[11,"mark_complete","","Mark command buffer as complete.",91,[[["self"]],["commandbuffer"]]],[11,"reset","","Reset command buffer.",91,[[["self"]],["commandbuffer",["initialstate","individualreset"]]]],[11,"mark_reset","","Mark command buffer as reset.",91,[[["self"]],["commandbuffer",["initialstate","noindividualreset"]]]],[11,"into_raw","","Dispose of command buffer wrapper releasing raw comman buffer value.",91,N],[11,"raw","","Get raw command buffer handle.",91,N],[11,"bind_index_buffer","","Bind index buffer.",97,N],[11,"bind_vertex_buffers","","Bind vertex buffers.",97,N],[11,"bind_graphics_pipeline","","Bind graphics pipeline.",97,N],[11,"bind_graphics_descriptor_sets","","Bind descriptor sets to graphics pipeline.",97,N],[11,"bind_compute_pipeline","","Bind graphics pipeline.",97,N],[11,"bind_compute_descriptor_sets","","Bind descriptor sets to compute pipeline.",97,N],[11,"pipeline_barrier","","Insert pipeline barrier.",97,N],[11,"next_subpass_inline","","Record next subpass inline.",98,[[["self"]],["renderpassinlineencoder"]]],[11,"next_subpass_secondary","","Record next subpass secondary.",98,[[["self"]],["renderpasssecondaryencoder"]]],[11,"init","rendy::factory","Creates a new `Factory` based off of a `Config<Q, W>` with some `QueuesConfigure` from the specified `vk::PhysicalDevice`.",101,[[["impl gfx_hal::instance<backend = b>"],["config"]],["result",["factory","error"]]]],[11,"wait_idle","","Wait for whole device become idle. This function is very heavy and usually used only for teardown.",101,[[["self"]],["result",["hostexecutionerror"]]]],[11,"dispose","","Dispose of the `Factory`.",101,N],[11,"create_buffer","","Creates a buffer that is managed with the specified properties.",101,[[["self"],["u64"],["u64"],["impl buffer::usage"]],["result",["buffer","error"]]]],[11,"create_image","","Creates an image that is mananged with the specified properties.",101,[[["self"],["u64"],["kind"],["u8"],["format"],["tiling"],["viewcapabilities"],["impl image::usage"]],["result",["image","error"]]]],[11,"upload_buffer","","Upload buffer content.",101,N],[11,"upload_visible_buffer","","Update buffer bound to host visible memory.vk::AccessFlags.",101,N],[11,"upload_image","","Upload image.",101,N],[11,"create_surface","","Create rendering surface from window.",101,[[["self"],["window"]],["surface"]]],[11,"create_target","","Create target out of rendering surface.",101,[[["self"],["surface"],["u32"],["usage"]],["result",["target","error"]]]],[11,"destroy_target","","Destroy target returning underlying window back to the caller.",101,[[["self"],["target"]],["window"]]],[11,"families","","Get queue families of the factory.",101,N],[11,"families_mut","","Get queue families of the factory.",101,N],[11,"family","","Get queue families of the factory.",101,[[["self"],["queuefamilyid"]],["family"]]],[11,"family_mut","","Get queue families of the factory.",101,[[["self"],["queuefamilyid"]],["family"]]],[11,"target_support","","Get surface support for family.",101,[[["self"],["queuefamilyid"],["target"]],["bool"]]],[11,"device","","Get device.",101,N],[11,"physical","","Get physical device.",101,N],[11,"create_semaphore","","Create new semaphore",101,[[["self"]],["result",["outofmemory"]]]],[11,"destroy_semaphore","","Destroy semaphore",101,N],[11,"create_fence","","Create new fence",101,[[["self"],["bool"]],["result",["outofmemory"]]]],[11,"reset_fence","","Wait for the fence become signeled.",101,N],[11,"reset_fences","","Wait for the fence become signeled.",101,[[["self"],["impl intoiterator<item = impl std::borrow::borrow<b::fence>>"]],["result",["outofmemory"]]]],[11,"wait_for_fence","","Wait for the fence become signeled.",101,N],[11,"wait_for_fences","","Wait for the fences become signeled.",101,[[["self"],["impl intoiterator<item = impl std::borrow::borrow<b::fence>>"],["waitfor"],["u64"]],["result",["bool","oomordevicelost"]]]],[11,"destroy_fence","","Destroy fence.",101,N],[11,"create_command_pool","","Create new command pool for specified family.",101,[[["self"],["queuefamilyid"]],["result",["commandpool","error"]]]],[11,"destroy_command_pool","","Create new command pool for specified family.",101,N],[11,"new","","Init factory.",101,[[["config"]],["result",["factory","error"]]]],[11,"or_init","rendy::frame::cirque","Init if not in ready state.",17,[[["self"],["impl fnonce(i, usize) -> t"]],["readyref"]]],[11,"or_reset","","Reset if not in initial state.",17,[[["self"],["impl fnonce(t, usize) -> i"]],["initialref"]]],[11,"init","","Init value.",105,[[["self"],["impl fnonce(i, usize) -> t"]],["readyref"]]],[11,"reset","","Init value.",106,[[["self"],["impl fnonce(t, usize) -> i"]],["initialref"]]],[11,"finish","","Finish using this value.",106,N],[11,"encode_submit","","Encode and submit.",107,[[["self"],["range",["u64"]],["bool"],["commandpool"],["impl fnonce(encoder<'_, b, c, l>, usize)"]],["submit",["nosimultaneoususe","outsiderenderpass"]]]],[11,"new","","Create new empty `Cirque`",107,[[],["cirque"]]],[11,"dispose","","Dispose of the `Cirque`.",107,N],[11,"get","","Get `CirqueRef` for specified frames range. Allocate new instance in initial state if no ready values exist.",107,[[["self"],["range",["u64"]],["impl fnonce(usize) -> i"],["impl fn(p, usize) -> t"]],["cirqueref"]]],[11,"new","rendy::frame","Create new `Frames` instance.",108,[[],["frames"]]],[11,"next","","Get next frame reference.",108,[[["self"]],["frame"]]],[11,"advance","","Advance to the next frame. All fences of the next frame must be queued.",108,N],[11,"complete_upper_bound","","Get upper bound of complete frames.",108,[[["self"]],["u64"]]],[11,"complete","","Check if frame with specified index is complete.",108,[[["self"],["u64"]],["option",["completeframe"]]]],[11,"wait_complete","","Wait for completion of the frames until specified (inclusive) Returns proof.",108,[[["self"],["u64"],["factory"],["impl fnmut(fences<b>)"]],["completeframe"]]],[11,"dispose","","Dispose of the `Frames`",108,N],[11,"range","","Get range of frame indices in this form:  `upper bound of finished frames .. next frame`.",108,[[["self"]],["range",["u64"]]]],[11,"index","","Get frame index.",109,[[["self"]],["u64"]]],[11,"index","","Get frame index.",110,[[["self"]],["u64"]]],[11,"builder","rendy::graph::present","Node builder.",114,[[["surface"]],["nodebuilder"]]],[11,"new","","Create present builder",115,[[["surface"]],["presentdesc"]]],[11,"run","rendy::graph","Perform graph execution. Run every node of the graph and submit resulting command buffers to the queues.",116,N],[11,"dispose","","Dispose of the `Graph`.",116,N],[11,"new","","Create new `GraphBuilder`",118,[[],["graphbuilder"]]],[11,"create_buffer","","Create new buffer owned by graph.",118,[[["self"],["u64"],["memoryusagevalue"]],["bufferid"]]],[11,"create_image","","Create new image owned by graph.",118,[[["self"],["kind"],["u8"],["format"],["memoryusagevalue"],["option",["clearvalue"]]],["imageid"]]],[11,"add_node","","Add node to the graph.",118,[[["self"],["nodebuilder"]],["nodeid"]]],[11,"build","","Build `Graph`.",118,[[["self"],["factory"],["t"]],["result",["graph","error"]]]],[11,"add_buffer","","Add buffer to the node. This method must be called for each buffer node uses.",119,[[["self"],["bufferid"]],["nodebuilder"]]],[11,"add_image","","Add image to the node. This method must be called for each image node uses.",119,[[["self"],["imageid"]],["nodebuilder"]]],[11,"add_dependency","","Add dependency. Node will be placed after its dependencies.",119,[[["self"],["nodeid"]],["nodebuilder"]]],[11,"with_buffer","","Add buffer to the node. This method must be called for each buffer node uses.",119,[[["self"],["bufferid"]],["nodebuilder"]]],[11,"with_image","","Add image to the node. This method must be called for each image node uses.",119,[[["self"],["imageid"]],["nodebuilder"]]],[11,"with_dependency","","Add dependency. Node will be placed after its dependencies.",119,[[["self"],["nodeid"]],["nodebuilder"]]],[11,"properties","rendy::memory","Get memory properties.",121,[[["self"]],["properties"]]],[11,"size","","Get memory size.",121,[[["self"]],["u64"]]],[11,"raw","","Get raw memory.",121,N],[11,"into_raw","","Unwrap raw memory.",121,N],[11,"from_raw","","Create memory from raw object.",121,N],[11,"host_visible","","Check if this memory is host-visible and can be mapped. `memory.host_visible()` is equivalent to `memory.properties().contains(Properties::CPU_VISIBLE)`",121,[[["self"]],["bool"]]],[11,"host_coherent","","Check if this memory is host-coherent and doesn't require invalidating or flushing. `memory.host_coherent()` is equivalent to `memory.properties().contains(Properties::COHERENT)`",121,[[["self"]],["bool"]]],[11,"max_allocation","","Maximum allocation size.",124,[[["self"]],["u64"]]],[11,"new","","Create new `LinearAllocator` for `memory_type` with `memory_properties` specified, with `LinearConfig` provided.",124,[[["memorytypeid"],["properties"],["dynamicconfig"]],["dynamicallocator"]]],[11,"max_block_size","","Maximum block size. Any request bigger will result in panic.",124,[[["self"]],["u64"]]],[11,"dispose","","Perform full cleanup of the memory allocated.",124,N],[11,"properties_required","","Get properties required by the `LinearAllocator`.",127,[[],["properties"]]],[11,"max_allocation","","Maximum allocation size.",127,[[["self"]],["u64"]]],[11,"new","","Create new `LinearAllocator` for `memory_type` with `memory_properties` specified, with `LinearConfig` provided.",127,[[["memorytypeid"],["properties"],["linearconfig"]],["linearallocator"]]],[11,"dispose","","Perform full cleanup of the memory allocated.",127,N],[11,"new","","This must be called with `gfx_hal::memory::Properties` fetched from physical device.",128,[[["p"],["h"]],["heaps"]]],[11,"allocate","","Allocate memory block from one of memory types specified by `mask`, for intended `usage`, with `size` and `align` requirements.",128,[[["self"],["impl gfx_hal::device<b>"],["u32"],["impl memoryusage"],["u64"],["u64"]],["result",["memoryblock","heapserror"]]]],[11,"free","","Free memory block.",128,N],[11,"dispose","","Dispose of allocator. Cleanup allocators before dropping. Will panic if memory instances are left allocated.",128,N],[11,"properties_required","","Get properties required by the allocator.",131,[[],["properties"]]],[11,"new","","Create new `LinearAllocator` for `memory_type` with `memory_properties` specified",131,[[["memorytypeid"],["properties"]],["dedicatedallocator"]]],[11,"unwrap_memory","","Get inner memory. Panics if mapped.",132,[[["self"]],["memory"]]],[11,"from_memory","","Make unmapped block.",132,[[["memory"]],["dedicatedblock"]]],[11,"new","","Map range of memory.",133,[[["memory"],["impl gfx_hal::device<b>"],["range",["u64"]]],["result",["mappedrange","error"]]]],[11,"from_raw","","Construct mapped range from raw mapping",133,[[["memory"],["nonnull",["u8"]],["range",["u64"]]],["mappedrange",["maybecoherent"]]]],[11,"ptr","","Get pointer to beginning of memory region.",133,[[["self"]],["nonnull",["u8"]]]],[11,"range","","Get mapped range.",133,[[["self"]],["range",["u64"]]]],[11,"read","","Fetch readable slice of sub-range to be read. Invalidating range if memory is not coherent. `range.end - range.start` must be multiple of `size_of::()`. `mapping offset + range.start` must be multiple of `align_of::()`.",133,[[["self"],["impl gfx_hal::device<b>"],["range",["u64"]]],["result",["error"]]]],[11,"write","","Fetch writer to the sub-region. This writer will flush data on drop if written at least once.",133,[[["self"],["impl gfx_hal::device<b>"],["range",["u64"]]],["result",["error"]]]],[11,"coherent","","Convert into mapped range with statically known coherency.",133,[[["self"]],["result",["mappedrange","mappedrange"]]]],[11,"write","","Fetch writer to the sub-region.",133,[[["self"],["range",["u64"]]],["result",["error"]]]],[11,"memory_type","","Get memory type id.",136,[[["self"]],["u32"]]],[11,"gfx_vertex_input_desc","rendy::mesh","Convert into gfx digestible type.",47,N],[11,"new","","Create empty builder.",140,[[],["meshbuilder"]]],[11,"with_indices","","Set indices buffer to the `MeshBuilder`",140,[[["self"],["i"]],["meshbuilder"]]],[11,"set_indices","","Set indices buffer to the `MeshBuilder`",140,[[["self"],["i"]],["meshbuilder"]]],[11,"with_vertices","","Add another vertices to the `MeshBuilder`",140,[[["self"],["d"]],["meshbuilder"]]],[11,"add_vertices","","Add another vertices to the `MeshBuilder`",140,[[["self"],["d"]],["meshbuilder"]]],[11,"with_prim_type","","Sets the primitive type of the mesh.",140,[[["self"],["primitive"]],["meshbuilder"]]],[11,"set_prim_type","","Sets the primitive type of the mesh.",140,[[["self"],["primitive"]],["meshbuilder"]]],[11,"build","","Builds and returns the new mesh.",140,[[["self"],["queuefamilyid"],["factory"]],["result",["mesh","error"]]]],[11,"builder","","Build new mesh with `MeshBuilder`",141,[[],["meshbuilder"]]],[11,"primitive","","gfx_hal::Primitive type of the `Mesh`",141,[[["self"]],["primitive"]]],[11,"bind","","Bind buffers to specified attribute locations.",141,N],[11,"draw_raw","","Record drawing command for this biding.",52,N],[11,"keep_alive","rendy::resource::buffer","Creates [`KeepAlive`] handler to extend buffer lifetime.",142,[[["self"]],["keepalive"]]],[11,"block","","Get buffers memory [`Block`].",142,N],[11,"block_mut","","Get buffers memory [`Block`].",142,N],[11,"raw","","Get raw buffer handle.",142,N],[11,"info","","Get buffer info.",142,[[["self"]],["info"]]],[11,"size","","Get buffer info.",142,[[["self"]],["u64"]]],[11,"keep_alive","rendy::resource::image","Creates [`KeepAlive`] handler to extend image lifetime.",148,[[["self"]],["keepalive"]]],[11,"block","","Get images memory [`Block`].",148,N],[11,"block_mut","","Get images memory [`Block`].",148,N],[11,"raw","","Get raw image handle.",148,N],[11,"info","","Get image [`Info`].",148,[[["self"]],["info"]]],[11,"kind","","Get [`Kind`] of the image.",148,[[["self"]],["kind"]]],[11,"format","","Get [`Format`] of the image.",148,[[["self"]],["format"]]],[11,"levels","","Get levels count of the image.",148,[[["self"]],["u8"]]],[11,"layers","","Get layers count of the image.",148,[[["self"]],["u16"]]],[11,"new","rendy::resource","Create new `Resources` instance.",152,[[],["resources"]]],[11,"create_buffer","","Create a buffer and bind to the memory that support intended usage.",152,[[["self"],["impl gfx_hal::device<b>"],["heaps"],["u64"],["u64"],["impl buffer::usage"]],["result",["buffer","error"]]]],[11,"destroy_buffer","","Destroy buffer. Buffer can be dropped but this method reduces overhead.",152,N],[11,"create_image","","Create an image and bind to the memory that support intended usage.",152,[[["self"],["impl gfx_hal::device<b>"],["heaps"],["u64"],["kind"],["u8"],["format"],["tiling"],["viewcapabilities"],["impl image::usage"]],["result",["image","error"]]]],[11,"destroy_image","","Destroy image. Image can be dropped but this method reduces overhead.",152,N],[11,"cleanup","","Recycle dropped resources.",152,N],[11,"new","rendy::shader","New dynamic shader.",154,[[["p"],["shaderkind"],["sourcelanguage"],["e"]],["shaderinfo"]]],[11,"new","rendy::shader::shaderc","Returns an compiler object that can be used to compile SPIR-V modules.",155,[[],["option",["compiler"]]]],[11,"compile_into_spirv","","Compiles the given source string `source_text` to a SPIR-V binary module according to the given `additional_options`.",155,[[["self"],["str"],["shaderkind"],["str"],["str"],["option",["compileoptions"]]],["result",["compilationartifact","error"]]]],[11,"compile_into_spirv_assembly","","Like `compile_into_spirv` but the result contains SPIR-V assembly text instead of a SPIR-V binary module.",155,[[["self"],["str"],["shaderkind"],["str"],["str"],["option",["compileoptions"]]],["result",["compilationartifact","error"]]]],[11,"preprocess","","Like `compile_into_spirv` but the result contains preprocessed source code instead of a SPIR-V binary module.",155,[[["self"],["str"],["str"],["str"],["option",["compileoptions"]]],["result",["compilationartifact","error"]]]],[11,"assemble","","Assembles the given SPIR-V assembly string `source_assembly` into a SPIR-V binary module according to the given `additional_options`.",155,[[["self"],["str"],["option",["compileoptions"]]],["result",["compilationartifact","error"]]]],[11,"new","","Returns a default-initialized compilation options object.",156,[[],["option",["compileoptions"]]]],[11,"clone","","Returns a copy of the given compilation options object.",156,[[["self"]],["option",["compileoptions"]]]],[11,"set_target_env","","Sets the target enviroment to `env`, affecting which warnings or errors will be issued.",156,N],[11,"set_source_language","","Sets the source language.",156,N],[11,"set_forced_version_profile","","Forces the GLSL language `version` and `profile`.",156,N],[11,"set_include_callback","","Sets the callback for handling the `#include` directive.",156,N],[11,"set_limit","","Sets the resource `limit` to the given `value`.",156,N],[11,"set_auto_bind_uniforms","","Sets whether the compiler should automatically assign bindings to uniforms that aren't already explicitly bound in the shader source.",156,N],[11,"set_hlsl_io_mapping","","Sets whether the compiler should use HLSL IO mapping rules for bindings.",156,N],[11,"set_hlsl_offsets","","Sets whether the compiler should determine block member offsets using HLSL packing rules instead of standard GLSL rules.",156,N],[11,"set_binding_base","","Sets the base binding number used for for a resource type when automatically assigning bindings.",156,N],[11,"set_binding_base_for_stage","","Like `set_binding_base`, but only takes effect when compiling the given shader stage.",156,N],[11,"set_hlsl_register_set_and_binding","","Sets a descriptor set and binding for an HLSL register in all shader stages.",156,N],[11,"set_hlsl_register_set_and_binding_for_stage","","Like `set_hlsl_register_set_and_binding`, but only takes effect when compiling the given shader stage.",156,N],[11,"add_macro_definition","","Adds a predefined macro to the compilation options.",156,N],[11,"set_optimization_level","","Sets the optimization level to `level`.",156,N],[11,"set_generate_debug_info","","Sets the compiler mode to generate debug information in the output.",156,N],[11,"set_suppress_warnings","","Sets the compiler mode to suppress warnings.",156,N],[11,"set_warnings_as_errors","","Sets the compiler mode to treat all warnings as errors.",156,N],[11,"len","","Returns the number of bytes of the compilation output data.",157,[[["self"]],["usize"]]],[11,"as_binary","","Returns the compilation output data as a binary slice.",157,N],[11,"as_binary_u8","","Returns the compilation output data as a binary slice. This method return a &[u8] that implement the Read trait.",157,N],[11,"as_text","","Returns the compilation output data as a text string.",157,[[["self"]],["string"]]],[11,"get_num_warnings","","Returns the number of warnings generated during the compilation.",157,[[["self"]],["u32"]]],[11,"get_warning_messages","","Returns the detailed warnings as a string.",157,[[["self"]],["string"]]],[11,"new","rendy::wsi","Create surface for the window.",158,[[["box"],["window"]],["surface"]]],[11,"kind","","Get surface image kind.",158,[[["self"]],["kind"]]],[11,"into_target","","Cast surface into render target.",158,N],[11,"dispose","","Dispose of target.",159,[[["self"],["impl gfx_hal::device<b>"]],["window"]]],[11,"surface","","Get raw surface handle.",159,N],[11,"swapchain","","Get raw surface handle.",159,N],[11,"swapchain_mut","","Get swapchain impl trait.",159,N],[11,"kind","","Get image kind of the target images.",159,[[["self"]],["kind"]]],[11,"extent","","Get target current extent.",159,[[["self"]],["extent2d"]]],[11,"format","","Get target current format.",159,[[["self"]],["format"]]],[11,"backbuffer","","Get raw handlers for the swapchain images.",159,[[["self"]],["backbuffer"]]],[11,"next_image","","Acquire next image.",159,N],[11,"indices","","Get indices.",160,N],[11,"present","","Present images by the queue.",160,[[["self"],["impl gfx_hal::queue::rawcommandqueue<b>"],["impl intoiterator<item = &'b (impl std::borrow::borrow<b::semaphore> + 'b)>"]],["result",["error"]]]]],"paths":[[8,"Level"],[3,"PendingState"],[8,"Submittable"],[3,"RecordingState"],[3,"DrawCommand"],[8,"Reset"],[8,"RenderPassRelation"],[8,"Supports"],[3,"ExecutableState"],[8,"Capability"],[3,"DispatchCommand"],[3,"Submission"],[8,"Usage"],[3,"MultiShot"],[8,"QueuesConfigure"],[8,"HeapsConfigure"],[3,"Config"],[4,"CirqueRef"],[3,"ImageAccess"],[3,"BufferBarrier"],[3,"SetLayout"],[3,"Layout"],[3,"Pipeline"],[8,"RenderPass"],[8,"NodeSubmittable"],[3,"NodeBuffer"],[3,"ImageBarrier"],[8,"AnyNodeDesc"],[3,"NodeImage"],[8,"Node"],[8,"AnyNode"],[8,"NodeDesc"],[3,"BufferAccess"],[8,"Block"],[3,"LinearConfig"],[8,"Write"],[3,"HeapsConfig"],[4,"Kind"],[8,"Allocator"],[4,"HeapsError"],[3,"DynamicConfig"],[4,"MemoryUsageValue"],[8,"MemoryUsage"],[3,"PosNormTangTex"],[8,"WithAttribute"],[3,"PosNorm"],[3,"Color"],[3,"VertexFormat"],[3,"Position"],[3,"PosColor"],[8,"AsVertex"],[3,"TexCoord"],[4,"Bind"],[3,"PosNormTex"],[3,"Tangent"],[3,"PosTex"],[4,"Indices"],[3,"Normal"],[8,"AsAttribute"],[8,"Query"],[3,"Info"],[8,"Usage"],[3,"Info"],[8,"Usage"],[8,"Shader"],[4,"Error"],[4,"TargetEnv"],[4,"SourceLanguage"],[4,"ResourceKind"],[4,"ShaderKind"],[4,"GlslProfile"],[4,"OptimizationLevel"],[4,"Limit"],[4,"IncludeType"],[3,"ResolvedInclude"],[3,"RenderPassSecondaryEncoder"],[3,"Execute"],[3,"OneShot"],[3,"Transfer"],[3,"General"],[3,"InvalidState"],[3,"RenderPassEncoder"],[3,"NoIndividualReset"],[3,"Family"],[3,"Graphics"],[3,"CommandPool"],[3,"NoSimultaneousUse"],[3,"IndividualReset"],[3,"RenderPassContinue"],[3,"Encoder"],[3,"SimultaneousUse"],[3,"CommandBuffer"],[3,"OutsideRenderPass"],[3,"InitialState"],[3,"PrimaryLevel"],[3,"SecondaryLevel"],[3,"Submit"],[3,"EncoderCommon"],[3,"RenderPassInlineEncoder"],[3,"Compute"],[3,"SavedHeapsConfig"],[3,"Factory"],[3,"OneGraphicsQueue"],[3,"BasicHeapsConfigure"],[3,"SavedQueueConfig"],[3,"InitialRef"],[3,"ReadyRef"],[3,"Cirque"],[3,"Frames"],[3,"CompleteFrame"],[3,"Frame"],[3,"BufferId"],[3,"ImageId"],[3,"NodeId"],[3,"PresentNode"],[3,"PresentDesc"],[3,"Graph"],[3,"RenderPassNode"],[3,"GraphBuilder"],[3,"NodeBuilder"],[3,"Coherent"],[3,"Memory"],[3,"Dynamic"],[3,"LinearBlock"],[3,"DynamicAllocator"],[3,"Upload"],[3,"NonCoherent"],[3,"LinearAllocator"],[3,"Heaps"],[3,"MaybeCoherent"],[3,"Download"],[3,"DedicatedAllocator"],[3,"DedicatedBlock"],[3,"MappedRange"],[3,"Data"],[3,"DynamicBlock"],[3,"MemoryBlock"],[3,"IndexBuffer"],[3,"Incompatible"],[3,"VertexBuffer"],[3,"MeshBuilder"],[3,"Mesh"],[3,"Buffer"],[3,"VertexBuffer"],[3,"IndexBuffer"],[3,"UploadBuffer"],[3,"DownloadBuffer"],[3,"UniformBuffer"],[3,"Image"],[3,"Texture"],[3,"RenderTargetStorage"],[3,"RenderTargetSampled"],[3,"Resources"],[3,"KeepAlive"],[3,"ShaderInfo"],[3,"Compiler"],[3,"CompileOptions"],[3,"CompilationArtifact"],[3,"Surface"],[3,"Target"],[3,"NextImages"]]};
initSearch(searchIndex);
