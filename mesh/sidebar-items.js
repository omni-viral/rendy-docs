initSidebarItems({"enum":[["Bind","Result of buffers bindings. It only contains `IndexBufferView` (if index buffers exists) and vertex count. Vertex buffers are in separate `VertexBufferSet`"],["Indices","Abstracts over two types of indices and their absence."]],"struct":[["Color","Type for color attribute of vertex"],["Incompatible","failure::Error type returned by `Mesh::bind` in case of mesh's vertex buffers are incompatible with requested vertex formats."],["IndexBuffer","Index buffer with it's type"],["Mesh","Single mesh is a collection of buffers that provides available attributes. Exactly one mesh is used per drawing call in common."],["MeshBuilder","Generics-free mesh builder. Useful for creating mesh from non-predefined set of data. Like from glTF."],["Normal","Type for texture coord attribute of vertex"],["PosColor","Vertex format with position and RGBA8 color attributes."],["PosNorm","Vertex format with position and normal attributes."],["PosNormTangTex","Vertex format with position, normal, tangent, and UV texture coordinate attributes."],["PosNormTex","Vertex format with position, normal and UV texture coordinate attributes."],["PosTex","Vertex format with position and UV texture coordinate attributes."],["Position","Type for position attribute of vertex."],["Tangent","Type for tangent attribute of vertex"],["TexCoord","Type for texture coord attribute of vertex"],["VertexBuffer","Vertex buffer with it's format"],["VertexFormat","Vertex format contains information to initialize graphics pipeline Attributes must be sorted by offset."]],"trait":[["AsAttribute","Trait for vertex attributes to implement"],["AsVertex","Trait implemented by all valid vertex formats."],["Query","Allows to query specific `Attribute`s of `AsVertex`"],["WithAttribute","Trait implemented by all valid vertex formats for each field"]],"type":[["Attribute","Vertex attribute type."]]});